require("dotenv").config({ path: "./config.env" });
const express = require("express");
const mongoose = require("mongoose");
const cookieParser = require("cookie-parser");
const cors = require("cors");
const corsOptions = require("./config/corsOption");

// Import routes
const employeeRoutes = require("./routes/employeeRoutes");
const patientRoutes = require("./routes/patientRoutes");

// T·∫°o ·ª©ng d·ª•ng Express
const app = express();

// Middleware quan tr·ªçng
app.use(express.json()); // H·ªó tr·ª£ JSON request
app.use(express.urlencoded({ extended: true })); // H·ªó tr·ª£ form data
app.use(cookieParser()); // X·ª≠ l√Ω cookies
app.use(cors(corsOptions)); // C·∫•u h√¨nh CORS

// Fix cache t·ª´ ExpressJS
app.use((req, res, next) => {
  res.set("Cache-Control", "no-store");
  next();
});

// Routes
app.use("/api/employees", employeeRoutes);
app.use("/api/patients", patientRoutes);

// C·∫•u h√¨nh c·ªïng v√† host
const host = process.env.HOST || "127.0.0.1";
const port = process.env.PORT || 3000;

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
  try {
    const DB_URI = process.env.DATABASE.replace(
      "<PASSWORD>",
      process.env.DATABASE_PASSWORD
    );

    await mongoose.connect(DB_URI);
    console.log("‚úÖ Database connected successfully");

    // Sau khi k·∫øt n·ªëi th√†nh c√¥ng, start server
    app.listen(port, host, () => {
      console.log(`üöÄ Server running at http://${host}:${port}`);
    });
  } catch (error) {
    console.error("‚ùå Database connection failed:", error.message);
    process.exit(1);
  }
};

// X·ª≠ l√Ω s·ª± ki·ªán m·∫•t k·∫øt n·ªëi MongoDB
mongoose.connection.on("error", (err) => {
  console.error("‚ùå MongoDB Connection Error:", err);
});

// Kh·ªüi ƒë·ªông server
console.log("‚è≥ Starting server...");
connectDB();
